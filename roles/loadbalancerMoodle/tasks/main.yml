---
  - name: install HAProxy and heartbeat
    apt: name={{item}} update_cache=yes state=latest
    with_items:
      - curl
      - haproxy
      - heartbeat

  - name: Update all packages to the latest version
    apt:
      update_cache: yes
      state: latest

  - name: Touch /etc/heartbeat/ha.cf
    file:
      path: /etc/heartbeat/ha.cf
      state: touch

  - name: Touch /etc/heartbeat/haresources
    file:
      path: /etc/heartbeat/haresources
      state: touch

  - name: Touch /etc/heartbeat/authkeys
    file:
      path: /etc/heartbeat/authkeys
      state: touch

  - name: haproxy conf
    blockinfile:
      dest: /etc/haproxy/haproxy.cfg
      insertbefore: EOF
      block: |
        frontend www
        	bind *:80
        	mode http
        	default_backend apache
        backend apache
        	balance roundrobin
        	server web1 {{ipMoodle1}}:80
          server web2 {{ipMoodle2}}:80

  - name: conf heartbeat ha.cf
    blockinfile:
      dest: /etc/heartbeat/ha.cf
      insertafter: AOF
      block: |
        logfile /var/log/heartbeat.log
        logfacility daemon
        node {{mainLBMoodle}}
        node {{backupLBMoodle}}
        keepalive 1
        deadtime 10
        bcast enp0s3
        udpport 700
        auto_failback yes

  - name: conf heartbeat haresources
    blockinfile:
      dest: /etc/heartbeat/haresources
      insertafter: AOF
      block: |
        {{mainLBMoodle}} {{ipVirtLBM}}

  - name: conf heartbeat authkeys
    blockinfile:
      dest: /etc/heartbeat/authkeys
      insertafter: AOF
      block: |
        auth 2
        1 md5 "{{passAuthkeysMoodle}}"
        2 crc

  - name: permissions keys
    shell: "{{item}}"
    with_items:
      - chmod 600 /etc/heartbeat/authkeys

  - name: restart heartbeat
    service:
      name: heartbeat
      state: restarted

  - name: restart haproxy
    service:
      name: haproxy
      state: restarted

  - name: Touch a iptables file
    file:
      path: /etc/network/if-pre-up.d/iptables
      state: touch

  - name: conf heartbeat
    blockinfile:
      dest: /etc/network/if-pre-up.d/iptables
      insertafter: AOF
      block: |
          #!/bin/bash

          iptables-restore < /etc/iptables.test.rules

          # supprime les règles déjà écrites
          iptables -F; iptables -X

          # on refuse toutes les connexions
          iptables -t filler-P INPUT DROP
          iptables -t filler-P FORWARD DROP
          iptables -t filler-P OUTPUT DROP

          # autorise loopback
          iptables -t filter -A INPUT -i icmp -j ACCEPT
          iptables -t filter -A OUTPUT -o icmp -j ACCEPT

          # autorise ping ICMP
          iptables -t filter -A INPUT -p icmp -j ACCEPT
          iptables -t filter -A OUTPUT -p icmp -j ACCEPT

          # ouverture du port SSH
          iptables -t filter -A INPUT -p TCP --dport 22 -j ACCEPT
          iptables -t filter -A OUTPUT -p TCP --sport 22 -j ACCEPT
          # autorise les échanges sur le port 8080 en entrée, uniquement pour l'ip ?? et sur l'interface enp0s8
          # on autorise juste le traffic venant des vm moodle et de nginx
          iptables -t filter -i enp0s3 --src {{ipReverseProxy}} -A INPUT -p TCP --dport 80 -j ACCEPT
          iptables -t filter -i enp0s3 --src {{ipMoodle1}} -A INPUT -p TCP --dport 8080 -j ACCEPT
          iptables -t filter -i enp0s3 --src {{ipMoodle2}} -A INPUT -p TCP --dport 8080 -j ACCEPT
          # autorise les échanges sur le port 8080 en sortie
          iptables -t filter -A OUTPUT -p TCP --sport 8080 -j ACCEPT
          iptables -t filter -A OUTPUT -p TCP --sport 80 -j ACCEPT

          # fermeture des autres ports
          iptables -t filter -A INPUT -j DROP
          iptables -t filter -A OUTPUT -j DROP
